<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian Vault]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Obsidian Vault</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 21 Feb 2025 10:31:30 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 21 Feb 2025 10:31:23 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[헥사고날 아키텍처]]></title><description><![CDATA[ 
 <br>
<br><a data-tooltip-position="top" aria-label="소프트웨어 아키텍처" data-href="#소프트웨어 아키텍처" href="about:blank#소프트웨어_아키텍처" class="internal-link" target="_self" rel="noopener nofollow">소프트웨어 아키텍처</a>

<br><a data-tooltip-position="top" aria-label="3-Tier 아키텍처" data-href="#3-Tier 아키텍처" href="about:blank#3-Tier_아키텍처" class="internal-link" target="_self" rel="noopener nofollow">3-Tier 아키텍처</a>
<br><a data-tooltip-position="top" aria-label="헥사고날 아키텍처" data-href="#헥사고날 아키텍처" href="about:blank#헥사고날_아키텍처" class="internal-link" target="_self" rel="noopener nofollow">헥사고날 아키텍처</a>

<br><a data-tooltip-position="top" aria-label="클린 아키텍처" data-href="#클린 아키텍처" href="about:blank#클린_아키텍처" class="internal-link" target="_self" rel="noopener nofollow">클린 아키텍처</a>
<br><a data-tooltip-position="top" aria-label="포트와 어댑터" data-href="#포트와 어댑터" href="about:blank#포트와_어댑터" class="internal-link" target="_self" rel="noopener nofollow">포트와 어댑터</a>


<br><a data-tooltip-position="top" aria-label="MSA" data-href="#MSA" href="about:blank#MSA" class="internal-link" target="_self" rel="noopener nofollow">MSA</a>


<br><a data-tooltip-position="top" aria-label="참고" data-href="#참고" href="about:blank#참고" class="internal-link" target="_self" rel="noopener nofollow">참고</a>
<br>본인은 Spring으로 웹개발을 배웠고, 지금까지 3회의 프로젝트 경험을 가지고 있다. 그 경험속에서 모든 아키텍처는 3-Tier 아키텍처였고, 프로젝트 규모도 작았기때문에 별다른 문제점을 느끼지는 못했었다. MSA라는 용어가 주변에서 자주 들려왔지만, 소규모 프로젝트에서는 고려할만한 대상이 아니라는 말도 함께 들려왔기에 크게 의식하지 않았었다.<br>취업준비를 이어가면서 공고들과 채용설명회를 참가하다보니 우연히 헥사고날 아키텍처라는 용어가 눈에 띄었다. 조직내에서 헥사고날 아키텍처를 사용한다고 했고, 그 조직에 들어가고 싶었기 때문에 자연스럽게 아키텍처에 대해 공부하게 되어 글로 작성해본다.<br>
개념적인 이해를 돕기위한 글이라 자세한 내용은 없다
<br><br>하나의 서비스를 구성하는 요소는 다양하다. <br>
<br>일반 사용자가 엑세스 할 수 있는 UI 등을 제공하는 표현 계층
<br>비즈니스 로직이 처리되는 비즈니스 로직 계층
<br>서비스에 필요한 데이터들을 저장하고, 관리하는 데이터 계층
<br>서비스는 이러한 계층들이 유기적으로 얽혀있는 구조를 띄고있다.<br>
소프트웨어 아키텍처는 이 계층간의 구조와 관계를 나타내는 지침이나 원칙을 의미한다.<br><br>3-Tier 아키텍처는 표현 계층, 비즈니스 로직 계층, 데이터 계층이 선형적으로 연결되어 있는 구조를 의미한다. <br>
계층과 게층이 직접적으로 연결되므로 모놀리식 아키텍처의 한 종류라고 볼 수 있다.
<br><img src="공부\이미지\3-tier-아키텍처.png"><br>서비스 이용자는 표현 계층을 통해 서비스에 접근하게되고, 어떠한 작업을 실행하면 비즈니스 로직 계층으로 요청이 전달된다. 이후, 데이터 요청이 필요한 작업이라면 데이터 계층를 통해 데이터를 얻어온 뒤 다시 표현계층에 처리된 결과를 출력하는 형식이다.<br>이 구조에서 비즈니스 로직 계층이 사라지면 2-Tier 아키텍처, 데이터 계층까지 사라지면 1-Tier 아키텍처가 된다.<br>
이 구조에서 아쉬운 점은 각 계층간 종속성을 가지기 쉽다는 것이다.
예를들어, Spring 프로젝트를 만들었다고 생각해보자.<br>
JPA를 사용한다고 가정했을 때, Service는 Repository에 대한 종속성을 가진다. Entity는 DB 테이블 규격과 JPA 문법에 맞춰지기 때문에 불필요한 기본생성자를 작성해야한다. 또한, 데이터 계층의 세부사항들이 노출되는 문제도 있다. 
<br><br>헥사고날 아키텍처는 애플리케이션의 코어 비즈니스 로직을 외부의 요청과 독립적으로 유지할 수 있는 아키텍처다. <br><img alt="1-hexagonal-architecture" src="공부\이미지\1-hexagonal-architecture.png"><br>헥사고날 아키텍처는 크게 3가지의 구성요소로 이루어져 있다.<br>
<br>프라이머리 어댑터(driving adapter) : 외부 요청을 받아들이고 코어 컴포넌트를 호출
<br>코어 컴포넌트(application core) : 비즈니스 로직을 처리하며, 세컨더리 어댑터를 통해 외부 시스템과 연동
<br>세컨더리 어댑터(driven adapter) : 외부 시스템과의 상호작용
<br>클린 아키텍처를 준수하기 때문에 저수준의 컴포넌트가 고수준 컴포넌트에 영향이 없도록 설계되어 있다. 이를 위해 포트와 어댑터를 이용한다<br>
헥사고날 아키텍처의 다른 이름은 포트와 어댑터 아키텍처다
<br><br>코드 레벨의 클린 코드나 지금 작성하는 클린 아키텍처 처럼 소프트웨어 개발에 클린이라는 용어가 들어갔을 때, 핵심은 추상화에 있다. <br>OOP를 예로 든다면 각 코드들의 결합도는 줄이고 응집도를 높혀 독립적인 객체들로 구성하는 것이 클린하게 만드는 거라고 볼 수 있다.<br>클린 아키텍처 또한, 아키텍처를 구성하는 각 계층들간의 결합도를 낮추고 응집도는 높히는 방식의 아키텍처 구성을 의미한다.<br><br>Spring 기준으로, 일반적인 형태의 Service 클래스를 생각해보자<br>@Service 
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

	private final UserRepository userRepository;

	@Override
	public UserResponseDto getUserInfo(Long userId) {
		// ...
		UserEntity user = userRepository.findById(userId);
		//...

		return UserResponseDto.fromEntity(user, userInfo);
	}
}
<br>대략적인 형태만 생각해봤을 때, Service에서 Repository를 이용하여 Entity를 얻어내는 형태를 띈다. 이는 현재 코드가 작성된 비즈니스 로직 계층이 외부 시스템인 DB에 종속되기 때문에, DB테이블 구조가 변경되는 등의 변경에 직접적인 영향을 받게된다.<br><br>헥사고날 아키텍처는 이러한 종속성을 제거하기 위해 어댑터 패턴을 이용한다.<br>
외부 시스템을 port로 구분하고, 각 시스템에 해당하는 어댑터클래스를 생성하여 비즈니스 로직에서는 일관된 처리방식을 제공한다. <br>@Service 
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

	private final UserJpaPort userJpaPort;

	@Override
	public UserResponseDto getUserInfo(Long userId) {
		// ...
		User user = userJpaPort.findById(userId);
		//...

		return UserResponseDto.from(user);
	}
}
<br>@Repository
@RequiredArgsConstructor
public class UserJpaAdapter implements UserJpaPort {

	private final UserRepository userRepository;

	@Override
	public User getUserInfo(Long userId) {
		// ...
		UserEntity userEntity = userRepository.findById(userId);
		//...

		return User.fromJpaEntity(userEntity);
	}
}
<br>이렇게 어댑터 패턴을 이용하여 외부 시스템을 호출하게 구성하면, 비즈니스 로직을 처리하는 곳에서는 항상 일관된 사용방식을 유지할 수 있다. <br>외부 시스템에 구조적인 변화가 있더라도 어댑터클래스만 수정해주면 되며,<br>
다른 외부 시스템을 호출하도록 변경하는 것도 포트만 변경해주면 되므로 수월하다.<br>
여기에 전략패턴까지 추가한다면 시스템 분류에따른 전략클래스를 생성하고, 전략 클래스내에서 관련있는 포트들을 관리하는 방식으로 작성할 수도 있을 것이다.
<br><br>마지막으로 MSA(Microservice Architecture)에 대해서도 간단하게 살펴보자.<br>
MSA는 서비스 단위로 개발단위를 분류하여, 각 서비스들간의 유기적인 연결을 통해 아키텍처를 구성하는 방식이다. MSA또한 그 목적이 서비스간의 결합도를 낮추고 응집도를 높이는데 있다.<br>모놀리식 아키텍처에서의 한 시스템은 메일, 검색 등의 여러 세부 서비스로 구분이 가능한데, MSA는 이러한 세부 서비스 단위로 각각 시스템을 구성하는 것이다. 각 시스템이 제공하는 인터페이스를 통해 시스템간 통신으로 작업들을 처리한다.<br>
이러한 시스템간 통신에는 네트워크 통신이 필요하며, 그 과정에서 AMQP와 같은 여러 프로토콜들을 고려해야한다.
<br>헥사고날 아키텍처와 MSA의 관계를 생각해보자면<br>
MSA 구조내에서 각 서비스 시스템들의 내부구조에 헥사고날 아키텍처가 적용될 수 있다. MSA자체는 하나의 시스템을 여러 세부 시스템으로 나눔으로써 결합도를 낮춘다. 여기에 헥사고날 아키텍처를 적용하면 나눠진 각 시스템내의 결합도 또한 낮출 수 있게된다.<br><br>
<br><a data-tooltip-position="top" aria-label="https://sunrise-min.tistory.com/entry/3-Tier-Architecture-%EC%A0%95%EC%9D%98-%EB%B0%8F-%EA%B5%AC%EC%84%B1%EB%B0%A9%EC%8B%9D" rel="noopener nofollow" class="external-link" href="https://sunrise-min.tistory.com/entry/3-Tier-Architecture-%EC%A0%95%EC%9D%98-%EB%B0%8F-%EA%B5%AC%EC%84%B1%EB%B0%A9%EC%8B%9D" target="_blank">3-Tier 아키텍처 정의 및 구성방식</a>
<br><a data-tooltip-position="top" aria-label="https://tech.kakaobank.com/posts/2311-hexagonal-architecture-in-messaging-hub/" rel="noopener nofollow" class="external-link" href="https://tech.kakaobank.com/posts/2311-hexagonal-architecture-in-messaging-hub/" target="_blank">유일한 멀티모듈 헥사고날 아키텍처 : 메시지 허브 적용기</a>
<br><a data-tooltip-position="top" aria-label="https://developers.hyundaimotorgroup.com/blog/381" rel="noopener nofollow" class="external-link" href="https://developers.hyundaimotorgroup.com/blog/381" target="_blank">클린 아키텍처 이론과 실습 #2 실습편</a>
<br><a data-tooltip-position="top" aria-label="https://engineering.linecorp.com/ko/blog/port-and-adapter-architecture" rel="noopener nofollow" class="external-link" href="https://engineering.linecorp.com/ko/blog/port-and-adapter-architecture" target="_blank">지속 가능한 소프트웨어 설계 패턴: 포트와 어댑터 아키텍처 적용하기</a>
]]></description><link>공부\헥사고날-아키텍처.html</link><guid isPermaLink="false">공부/헥사고날 아키텍처.md</guid><pubDate>Fri, 07 Feb 2025 03:07:48 GMT</pubDate><enclosure url="공부\이미지\3-tier-아키텍처.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="공부\이미지\3-tier-아키텍처.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>